import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onError.withOpacity(1),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray60002,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.gray50,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary.withOpacity(1);
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray80001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
    bodyLarge: TextStyle(
      color: colorScheme.primary.withOpacity(1),
      fontSize: 18.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    bodyMedium: TextStyle(
      color: appTheme.gray50001,
      fontSize: 14.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    bodySmall: TextStyle(
      color: colorScheme.primary.withOpacity(1),
      fontSize: 12.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    headlineSmall: TextStyle(
      color: colorScheme.primary.withOpacity(1),
      fontSize: 24.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    titleLarge: TextStyle(
      color: colorScheme.onError.withOpacity(1),
      fontSize: 20.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    titleMedium: TextStyle(
      color: colorScheme.primary.withOpacity(1),
      fontSize: 18.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w500,
    ),
    headlineLarge: TextStyle(
      color: appTheme.black900,
      fontSize: 32.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),

  );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X00000000),
    primaryContainer: Color(0X18191B08),
    secondaryContainer: Color(0X33000000),

    // Error colors
    errorContainer: Color(0XCB66BF40),
    onError: Color(0XABFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XC4203244),
    onPrimaryContainer: Color(0XBFC0A200),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber400 => const Color(0XFFE9C91A);

  // Black
  Color get black900 => const Color(0XFF040000);
  Color get black90000 => const Color(0X00040500);
  Color get black990 => Color(0XFF000000);
  // BlueGray
  Color get blueGray100 => const Color(0XFFD9D9D9);
  Color get blueGray200 => const Color(0XFFADAFB7);
  Color get blueGray90000 => const Color(0X002E3A46);
  Color get blueGray900A4 => const Color(0XA4283949);

  // BlueGrayc
  Color get blueGray9007c => const Color(0X7C293948);

  // BlueGrayDf
  Color get blueGray900Df => const Color(0XDF26384A);

  // BlueGrayF
  Color get blueGray900F4 => const Color(0XF425384B);

  // DeepOrange
  Color get deepOrange100 => const Color(0XFFFFB5B5);
  Color get deepOrange50 => const Color(0XFFF2E3E3);

  Color get FB => const Color(0XFF3b5998);
  // Gray3b5998
  Color get gray200 => Color(0XFFF6EFEF);
  Color get gray300 => const Color(0XFFDDDDDD);
  Color get gray400 => const Color(0XFFBDBEBF);
  Color get gray40001 => const Color(0XFFC1AFAF);
  Color get gray40002 => const Color(0XFFBCBDBF);
  Color get gray50 => const Color(0XFFFCFCFC);
  Color get gray500 => const Color(0XFF91959A);
  Color get gray50001 => const Color(0XFFA19999);
  Color get gray600 => const Color(0XFF837A7A);
  Color get gray60001 => const Color(0XFF838485);
  Color get gray60002 => const Color(0XFF6B6B6B);
  Color get gray60003 => const Color(0XFF826666);
  Color get gray700 => const Color(0XFF715050);
  Color get gray70001 => const Color(0XFF5E5253);
  Color get gray70002 => const Color(0XFF6A5454);
  Color get gray70003 => const Color(0XFF605453);
  Color get gray70004 => const Color(0XFF555151);
  Color get gray70005 => const Color(0XFF715151);
  Color get gray800 => const Color(0XFF504A4A);
  Color get gray80001 => const Color(0XFF444444);
  Color get gray80002 => const Color(0XFF505049);
  Color get gray900 => const Color(0XFF231F20);
  Color get gray90001 => const Color(0XFF171717);
  Color get gray90002 => const Color(0XFF212121);
  Color get gray90024 => const Color(0X24282300);
  Color get gray90032 => const Color(0X32303410);

  // Grayd
  Color get gray9001d => const Color(0X1D1E2009);

  // Green
  Color get greenA700 => Color(0XFF11DA11);
  Color get lightGreenA200 => Color(0XFFCEFE4A);

  // LightGreena
  Color get lightGreen9004a => const Color(0X4A444917);

  // LightGreen
  Color get lightGreen90067 => const Color(0X675D6420);

  // Pure White
  Color get whiteA700 => Color(0XFFFFFFFF);
  // Lime
  Color get lime400 => const Color(0XFFCEFD4A);
  Color get lime40001 => const Color(0XFFCEDD4A);
  Color get lime90071 => const Color(0X71666E24);
  Color get lime90077 => const Color(0X777A6700);
  Color get lime90097 => const Color(0X97998200);

  // LimeB
  Color get lime700B5 => const Color(0XB5A0AB39);

  // LimeC
  Color get lime700C7 => const Color(0XC7B0BC3F);

  // Limed
  Color get lime9005d => const Color(0X5D605200);

  // White
  Color get whiteA70000 => const Color(0X00FFFEFC);

  // Yellow
  Color get yellowA700 => const Color(0XFFFFD700);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
